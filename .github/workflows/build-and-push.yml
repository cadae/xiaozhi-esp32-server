name: Build and Publish (GHCR)

on:
  push:
    branches: [ customised ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ customised ]
  workflow_dispatch:

env:
  IMAGE_NAME: xiaozhi-esp32-server
  CONTEXT_DIR: .
  DOCKERFILE: Dockerfile-server
  REGISTRY: ghcr.io

jobs:
  server:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Check Disk Space (before)
        run: |
          df -h
          docker system df || true

      - name: Clean up Docker resources
        run: |
          docker system prune -af || true
          docker builder prune -af || true
          df -h

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            # semver tags if pushing v* tags like v1.2.3
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # always publish latest (tracking customised branch CI builds)
            type=raw,value=latest

      - name: Build & Push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.CONTEXT_DIR }}
          file: ${{ env.DOCKERFILE }}
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate image digest artifact
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          echo "Repository: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}" > server-image-info.txt
          echo "Digest: ${{ steps.build.outputs.digest }}" >> server-image-info.txt
          echo "Tags:" >> server-image-info.txt
          echo "${{ steps.meta.outputs.tags }}" | tr ' ' '\n' >> server-image-info.txt
        shell: bash

      - name: Upload image info
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: server-image-info
          path: server-image-info.txt

      - name: Summary
        run: |
          echo "### Image published" >> $GITHUB_STEP_SUMMARY
          echo "Registry: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "Repository: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "Tags:" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | tr ' ' '\n' >> $GITHUB_STEP_SUMMARY

  web:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      WEB_IMAGE_NAME: xiaozhi-esp32-web
      REGISTRY: ghcr.io
    steps:
      - name: Check Disk Space (before)
        run: |
          df -h
          docker system df || true

      - name: Clean up Docker resources
        run: |
          docker system prune -af || true
          docker builder prune -af || true
          df -h

      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.WEB_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build & Push (web)
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile-web
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=web
          cache-to: type=gha,scope=web,mode=max

      - name: Generate web image digest artifact
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          echo "Repository: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.WEB_IMAGE_NAME }}" > web-image-info.txt
          echo "Digest: ${{ steps.build.outputs.digest }}" >> web-image-info.txt
          echo "Tags:" >> web-image-info.txt
          echo "${{ steps.meta.outputs.tags }}" | tr ' ' '\n' >> web-image-info.txt
        shell: bash

      - name: Upload web image info
        if: ${{ github.event_name != 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: web-image-info
          path: web-image-info.txt

      - name: Summary
        run: |
          echo "### Web Image published" >> $GITHUB_STEP_SUMMARY
          echo "Registry: ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
          echo "Repository: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.WEB_IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
          echo "Tags:" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" | tr ' ' '\n' >> $GITHUB_STEP_SUMMARY
